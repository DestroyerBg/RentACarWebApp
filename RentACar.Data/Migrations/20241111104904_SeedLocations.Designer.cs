// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar.Data;

#nullable disable

namespace RentACar.Data.Migrations
{
    [DbContext(typeof(RentACarDbContext))]
    [Migration("20241111104904_SeedLocations")]
    partial class SeedLocations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RentACar.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasComment("User's birthdate.");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("User's first name.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RentACar.Data.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("E.G. BMW, Mercedes or etc");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int")
                        .HasComment("Car's horsepower");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the entity deleted?");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car's location");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("E.G. model number like E36, E60 or w211");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Car's registration number");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int")
                        .HasComment("Year when car was produced");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("RentACar.Data.Models.CarFeature", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CarId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("CarsFeatures");
                });

            modelBuilder.Entity("RentACar.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6924f6b-1d12-4647-a2a8-64c52158d075"),
                            Name = "Луксозни"
                        },
                        new
                        {
                            Id = new Guid("8f49eae6-1329-41bb-a2e0-78b11cf9c50d"),
                            Name = "Спортни"
                        },
                        new
                        {
                            Id = new Guid("1b916af1-b322-4ea2-9d8c-c8fa7055f6b3"),
                            Name = "Ежедневни"
                        },
                        new
                        {
                            Id = new Guid("85a1fbb2-96e6-4ac9-a763-79ec1e684e24"),
                            Name = "SUV"
                        },
                        new
                        {
                            Id = new Guid("c066c085-2357-4a64-885a-c19d311c08a8"),
                            Name = "Специални"
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.CustomerFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the car");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the customer");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime2")
                        .HasComment("Date when comment was post");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasComment("Feedback description");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasComment("Stars given from user");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the reservation");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReservationId");

                    b.ToTable("CustomerFeedbacks");
                });

            modelBuilder.Entity("RentACar.Data.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Feature name");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3febe51-6253-4143-8962-1a9574c19419"),
                            Name = "Климатик"
                        },
                        new
                        {
                            Id = new Guid("42b60b5e-0b91-4943-8cfd-88420eae105a"),
                            Name = "Безключово палене"
                        },
                        new
                        {
                            Id = new Guid("30b20046-0f0a-4f6c-ab0f-9ab9ede1b610"),
                            Name = "Подгрев на седалки"
                        },
                        new
                        {
                            Id = new Guid("2048d92c-5d27-44b4-bcc0-fc9e76e1fbc2"),
                            Name = "Автоматична скоростна кутия"
                        },
                        new
                        {
                            Id = new Guid("a2eb42c9-a4ab-4a1c-bff0-421202b8f1cd"),
                            Name = "Камера за задно виждане"
                        },
                        new
                        {
                            Id = new Guid("535e913d-0f6e-4318-b128-a6ecd04b4e74"),
                            Name = "Двузонов климатроник"
                        },
                        new
                        {
                            Id = new Guid("e4eaae84-ddad-43c4-b70a-cb6e164dc3aa"),
                            Name = "Навигационна система"
                        },
                        new
                        {
                            Id = new Guid("2a298718-05f9-41ee-821b-5d90baf6dcea"),
                            Name = "Wi-fi хотспот"
                        },
                        new
                        {
                            Id = new Guid("0dfebc3a-bce6-4f35-87dd-0c9e2bc42d88"),
                            Name = "Система за автоматично регулиране на дългите светлини"
                        },
                        new
                        {
                            Id = new Guid("f3a6bfe8-28db-44ee-b3ab-bd37a34cf457"),
                            Name = "Адаптивен круиз контрол"
                        },
                        new
                        {
                            Id = new Guid("bd334a6a-059e-4c83-a013-36ed8906973d"),
                            Name = "Лети джанти"
                        },
                        new
                        {
                            Id = new Guid("012d8597-b185-4506-8ea6-0ce343ec6b1f"),
                            Name = "Дневни LED светлини"
                        },
                        new
                        {
                            Id = new Guid("6db368f5-8cef-4a1b-b63b-4d4078023aff"),
                            Name = "4x4 задвижване"
                        },
                        new
                        {
                            Id = new Guid("7724a1e4-5336-4f56-8f08-b241c162a6c3"),
                            Name = "Старт-стоп система"
                        },
                        new
                        {
                            Id = new Guid("7a89ef81-86a3-4aca-9063-6b0d86574a69"),
                            Name = "Режим за управление на сняг"
                        },
                        new
                        {
                            Id = new Guid("b2cbf9f6-82c7-442d-8767-08f162fd9074"),
                            Name = "Подгряване на волана"
                        },
                        new
                        {
                            Id = new Guid("4fc64f93-3942-4d45-a1b5-2b54e302149b"),
                            Name = "USB портове за задните седалки"
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("When the issurance expirates");

                    b.Property<decimal>("InsuranceAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("This is a sum of the price from all insurance benefits");

                    b.Property<string>("InsuranceProvider")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Insurance provider name");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the reservation for which is the issurance");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("RentACar.Data.Models.InsuranceBenefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Issurance benefit name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceBenefits");
                });

            modelBuilder.Entity("RentACar.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("City name");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int")
                        .HasComment("City's postal code");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70e08947-b59d-49a9-ab99-3247cb571c84"),
                            City = "София",
                            PostalCode = 1000
                        },
                        new
                        {
                            Id = new Guid("abd17c5a-1114-4177-bd63-36970b5c2236"),
                            City = "Пловдив",
                            PostalCode = 4000
                        },
                        new
                        {
                            Id = new Guid("97787cca-d552-4d52-8f97-39a4213dfed7"),
                            City = "Варна",
                            PostalCode = 9000
                        },
                        new
                        {
                            Id = new Guid("e586990c-7ff0-41ef-8c57-77053e984b03"),
                            City = "Бургас",
                            PostalCode = 8000
                        },
                        new
                        {
                            Id = new Guid("90e51e92-fa42-45cb-b9b7-ab5f9c3f38cb"),
                            City = "Русе",
                            PostalCode = 7000
                        },
                        new
                        {
                            Id = new Guid("cb1b3107-8b1f-4a9e-a15d-ed2311d461ef"),
                            City = "Стара Загора",
                            PostalCode = 6000
                        },
                        new
                        {
                            Id = new Guid("ef1ce795-ba28-4653-a0f6-10bb462fadc2"),
                            City = "Плевен",
                            PostalCode = 5800
                        },
                        new
                        {
                            Id = new Guid("ce6a1edf-e6aa-4bf5-9049-ee583eeb9130"),
                            City = "Добрич",
                            PostalCode = 9300
                        },
                        new
                        {
                            Id = new Guid("2eb6f329-76cc-4f3d-8bfd-9ff3a1cd2fdd"),
                            City = "Шумен",
                            PostalCode = 9700
                        },
                        new
                        {
                            Id = new Guid("c9e95cef-5b92-48a4-84bc-6d26c2ac3dfb"),
                            City = "Благоевград",
                            PostalCode = 2700
                        },
                        new
                        {
                            Id = new Guid("046017b3-55d5-407e-a23b-52250ed25774"),
                            City = "Велико Търново",
                            PostalCode = 5000
                        },
                        new
                        {
                            Id = new Guid("3526a8a5-4a3b-4e91-ac9a-dae50b216e46"),
                            City = "Габрово",
                            PostalCode = 5300
                        },
                        new
                        {
                            Id = new Guid("5e8bd010-6bff-4f05-afbc-9cee1509efad"),
                            City = "Кърджали",
                            PostalCode = 6600
                        },
                        new
                        {
                            Id = new Guid("1022c0eb-fbea-44ac-9261-f770a8dec66b"),
                            City = "Монтана",
                            PostalCode = 3400
                        },
                        new
                        {
                            Id = new Guid("30b8ce88-8536-4e66-8561-2e0d7a4ada53"),
                            City = "Сливен",
                            PostalCode = 8800
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("This is car id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("This is customer id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("When the reservation ends");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the entity deleted?");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("When the reservation begins");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("Total price for the reservation");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentACar.Data.Models.Car", b =>
                {
                    b.HasOne("RentACar.Data.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Location", "Location")
                        .WithMany("Cars")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("RentACar.Data.Models.CarFeature", b =>
                {
                    b.HasOne("RentACar.Data.Models.Car", "Car")
                        .WithMany("CarFeatures")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Feature", "Feature")
                        .WithMany("CarFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("RentACar.Data.Models.CustomerFeedback", b =>
                {
                    b.HasOne("RentACar.Data.Models.Car", "Car")
                        .WithMany("Comments")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RentACar.Data.Models.Insurance", b =>
                {
                    b.HasOne("RentACar.Data.Models.Reservation", "Reservation")
                        .WithOne("Insurance")
                        .HasForeignKey("RentACar.Data.Models.Insurance", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RentACar.Data.Models.InsuranceBenefit", b =>
                {
                    b.HasOne("RentACar.Data.Models.Insurance", null)
                        .WithMany("InsuranceBenefits")
                        .HasForeignKey("InsuranceId");
                });

            modelBuilder.Entity("RentACar.Data.Models.Reservation", b =>
                {
                    b.HasOne("RentACar.Data.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Location", null)
                        .WithMany("Reservations")
                        .HasForeignKey("LocationId");

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RentACar.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RentACar.Data.Models.Car", b =>
                {
                    b.Navigation("CarFeatures");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("RentACar.Data.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("RentACar.Data.Models.Feature", b =>
                {
                    b.Navigation("CarFeatures");
                });

            modelBuilder.Entity("RentACar.Data.Models.Insurance", b =>
                {
                    b.Navigation("InsuranceBenefits");
                });

            modelBuilder.Entity("RentACar.Data.Models.Location", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RentACar.Data.Models.Reservation", b =>
                {
                    b.Navigation("Insurance");
                });
#pragma warning restore 612, 618
        }
    }
}
