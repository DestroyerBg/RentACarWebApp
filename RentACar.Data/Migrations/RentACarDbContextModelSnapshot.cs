// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar.Data;

#nullable disable

namespace RentACar.Data.Migrations
{
    [DbContext(typeof(RentACarDbContext))]
    partial class RentACarDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsuranceInsuranceBenefit", b =>
                {
                    b.Property<Guid>("InsuranceBenefitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InsurancesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InsuranceBenefitsId", "InsurancesId");

                    b.HasIndex("InsurancesId");

                    b.ToTable("InsuranceInsuranceBenefit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RentACar.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasComment("User's birthdate.");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("User's first name.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RentACar.Data.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("E.G. BMW, Mercedes or etc");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int")
                        .HasComment("Car's horsepower");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the entity deleted?");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car's location");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("E.G. model number like E36, E60 or w211");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Car's registration number");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int")
                        .HasComment("Year when car was produced");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("RentACar.Data.Models.CarFeature", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CarId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("CarsFeatures");
                });

            modelBuilder.Entity("RentACar.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cedd0634-7ea3-443c-a40a-e020798bd754"),
                            Name = "Луксозни"
                        },
                        new
                        {
                            Id = new Guid("637980e0-dafa-4492-bee2-4896c6e22e98"),
                            Name = "Спортни"
                        },
                        new
                        {
                            Id = new Guid("f85af879-ac09-439e-8b33-504cd41b2b29"),
                            Name = "Ежедневни"
                        },
                        new
                        {
                            Id = new Guid("e2b004b7-d8e2-4c14-8487-445288d88baa"),
                            Name = "SUV"
                        },
                        new
                        {
                            Id = new Guid("64598716-6e73-4830-9c32-18062327a025"),
                            Name = "Специални"
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.CustomerFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the car");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the customer");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime2")
                        .HasComment("Date when comment was post");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasComment("Feedback description");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasComment("Stars given from user");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the reservation");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReservationId");

                    b.ToTable("CustomerFeedbacks");
                });

            modelBuilder.Entity("RentACar.Data.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Feature name");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b8d468f-b321-4910-b168-db4135fc2ded"),
                            Name = "Климатик"
                        },
                        new
                        {
                            Id = new Guid("d7b73c25-33e3-4c7f-a164-009f86a22d39"),
                            Name = "Безключово палене"
                        },
                        new
                        {
                            Id = new Guid("e2db56a2-dddf-47e1-82e0-e9578aa8389c"),
                            Name = "Подгрев на седалки"
                        },
                        new
                        {
                            Id = new Guid("f70e94c5-4e85-45a5-9805-edc4ea608616"),
                            Name = "Автоматична скоростна кутия"
                        },
                        new
                        {
                            Id = new Guid("efbe1d4d-be12-4f65-9bba-c6e3fad0b728"),
                            Name = "Камера за задно виждане"
                        },
                        new
                        {
                            Id = new Guid("c7e5ef3a-2c38-4b42-bf4d-7f8254932f53"),
                            Name = "Двузонов климатроник"
                        },
                        new
                        {
                            Id = new Guid("6e8f1eaa-31a7-4b0a-816a-792e9cacc83b"),
                            Name = "Навигационна система"
                        },
                        new
                        {
                            Id = new Guid("48beb215-f99b-4f34-b181-f29224494f9b"),
                            Name = "Wi-fi хотспот"
                        },
                        new
                        {
                            Id = new Guid("eec8a24e-43a8-4c09-8d59-54257190b263"),
                            Name = "Система за автоматично регулиране на дългите светлини"
                        },
                        new
                        {
                            Id = new Guid("89050a2f-622a-43b8-b444-eef2d1b343b8"),
                            Name = "Адаптивен круиз контрол"
                        },
                        new
                        {
                            Id = new Guid("755cf66a-6fe1-4ca2-a3e2-bad6bf51cd01"),
                            Name = "Лети джанти"
                        },
                        new
                        {
                            Id = new Guid("d8434029-5cf6-47b8-8bee-92784cc2aff1"),
                            Name = "Дневни LED светлини"
                        },
                        new
                        {
                            Id = new Guid("cd409ed9-eaf9-4827-b5e5-7d2d2c0657b9"),
                            Name = "4x4 задвижване"
                        },
                        new
                        {
                            Id = new Guid("f5e941e1-7e32-4d01-84ac-bfb46dc7686a"),
                            Name = "Старт-стоп система"
                        },
                        new
                        {
                            Id = new Guid("d19e5b20-7a00-44b8-9c58-6e2153391da7"),
                            Name = "Режим за управление на сняг"
                        },
                        new
                        {
                            Id = new Guid("48bda0ec-3a9d-4a49-afcd-2bdcdf589ef2"),
                            Name = "Подгряване на волана"
                        },
                        new
                        {
                            Id = new Guid("4ee0377d-e821-48aa-8811-a334d87b36ca"),
                            Name = "USB портове за задните седалки"
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("When the issurance expirates");

                    b.Property<decimal>("InsuranceAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("This is a sum of the price from all insurance benefits");

                    b.Property<string>("InsuranceProvider")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Insurance provider name");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the reservation for which is the issurance");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("RentACar.Data.Models.InsuranceBenefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Issurance benefit name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("InsuranceBenefits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af6ea01c-ac3a-4f0e-ac5d-960fccf9e108"),
                            Name = "Безплатна пътна помощ",
                            Price = 20.5m
                        },
                        new
                        {
                            Id = new Guid("6b6d085a-5eca-4c13-999c-acfa41c31fbb"),
                            Name = "Заместващ автомобил при авария",
                            Price = 50.0m
                        },
                        new
                        {
                            Id = new Guid("4634145c-0b58-40e5-ab28-453dc7dbfcfb"),
                            Name = "Покритие на щети при пожар",
                            Price = 35.75m
                        },
                        new
                        {
                            Id = new Guid("8247b60f-6d1b-44f2-8d25-4b626c846289"),
                            Name = "Покритие на щети при природни бедствия",
                            Price = 45.25m
                        },
                        new
                        {
                            Id = new Guid("f4cc3f4e-758e-44d2-b51f-fbd248941104"),
                            Name = "24/7 телефонна помощ",
                            Price = 15.0m
                        },
                        new
                        {
                            Id = new Guid("d8a918c2-32df-48fe-887d-6a3bdd4140a4"),
                            Name = "Покритие на щети при вандализъм",
                            Price = 40.99m
                        },
                        new
                        {
                            Id = new Guid("ebbb0552-d7ab-4877-8457-f6ba29c74296"),
                            Name = "Замяна на ключове при загуба",
                            Price = 25.49m
                        },
                        new
                        {
                            Id = new Guid("7634e8de-6b07-4432-9711-7f6cc464b71c"),
                            Name = "Медицинска застраховка за пътниците",
                            Price = 30.0m
                        },
                        new
                        {
                            Id = new Guid("b56a255e-12a2-477b-b3e5-a45cffccd33b"),
                            Name = "Покритие при пътно-транспортно произшествие",
                            Price = 60.75m
                        },
                        new
                        {
                            Id = new Guid("4f913d5f-56de-4b35-a578-0ebfd72f2ac2"),
                            Name = "Покриване на разходи за транспорт",
                            Price = 18.99m
                        },
                        new
                        {
                            Id = new Guid("26df4951-6af1-4a2c-b45e-a87b37b4609e"),
                            Name = "Покритие при повреда на стъклата",
                            Price = 22.89m
                        },
                        new
                        {
                            Id = new Guid("111f5874-9c53-4e81-804b-d3bf15cf4924"),
                            Name = "Техническа поддръжка на място",
                            Price = 35.0m
                        },
                        new
                        {
                            Id = new Guid("a6f454a9-e1eb-4cbc-bbb8-b8d2d9431354"),
                            Name = "Разходи за репатрак",
                            Price = 50.25m
                        },
                        new
                        {
                            Id = new Guid("4b133c49-58c6-46e3-ac64-76c15e394278"),
                            Name = "Заместваща гума при повреда",
                            Price = 10.0m
                        },
                        new
                        {
                            Id = new Guid("92f0e642-8b86-4a60-9952-6f001462d193"),
                            Name = "Застраховка за лични вещи в автомобила",
                            Price = 45.89m
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("City name");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int")
                        .HasComment("City's postal code");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d60fea38-a9e6-4c95-9d41-c034aea4e7bc"),
                            City = "София",
                            PostalCode = 1000
                        },
                        new
                        {
                            Id = new Guid("ce544101-8446-4841-9fb9-bb6a28f54a8d"),
                            City = "Пловдив",
                            PostalCode = 4000
                        },
                        new
                        {
                            Id = new Guid("f1e74d6d-6635-420f-a33b-f38451f036a9"),
                            City = "Варна",
                            PostalCode = 9000
                        },
                        new
                        {
                            Id = new Guid("3de2f94d-6abd-4b5c-86c0-8cd5a61c6d3a"),
                            City = "Бургас",
                            PostalCode = 8000
                        },
                        new
                        {
                            Id = new Guid("dc134064-d14c-4a5a-88c1-426ea1ddc247"),
                            City = "Русе",
                            PostalCode = 7000
                        },
                        new
                        {
                            Id = new Guid("f2c0a151-affd-45e7-86f1-a4af3c14591c"),
                            City = "Стара Загора",
                            PostalCode = 6000
                        },
                        new
                        {
                            Id = new Guid("4a249ab9-522f-4c67-b2b5-4d332c94d691"),
                            City = "Плевен",
                            PostalCode = 5800
                        },
                        new
                        {
                            Id = new Guid("40030c7e-7e40-42e1-bbee-34139d9fc383"),
                            City = "Добрич",
                            PostalCode = 9300
                        },
                        new
                        {
                            Id = new Guid("7b54e3fa-b286-47a8-956a-ce732f7ce385"),
                            City = "Шумен",
                            PostalCode = 9700
                        },
                        new
                        {
                            Id = new Guid("461e3f2d-08eb-4ca4-b23d-bbfe9cc1c9d3"),
                            City = "Благоевград",
                            PostalCode = 2700
                        },
                        new
                        {
                            Id = new Guid("67a2c81a-e6f3-4ed7-86ed-42f08d0daf0f"),
                            City = "Велико Търново",
                            PostalCode = 5000
                        },
                        new
                        {
                            Id = new Guid("3173028f-ec39-4056-b2f9-a6f2608fdd4d"),
                            City = "Габрово",
                            PostalCode = 5300
                        },
                        new
                        {
                            Id = new Guid("dd6b81b1-7577-45e2-9399-ee37f9dcb5bc"),
                            City = "Кърджали",
                            PostalCode = 6600
                        },
                        new
                        {
                            Id = new Guid("792c3757-2bc3-4b8a-8c49-4a164e1ad37d"),
                            City = "Монтана",
                            PostalCode = 3400
                        },
                        new
                        {
                            Id = new Guid("f2cd67b8-0be7-40d9-bd89-b789698c08e9"),
                            City = "Сливен",
                            PostalCode = 8800
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("This is car id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("This is customer id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("When the reservation ends");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the entity deleted?");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("When the reservation begins");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("Total price for the reservation");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("InsuranceInsuranceBenefit", b =>
                {
                    b.HasOne("RentACar.Data.Models.InsuranceBenefit", null)
                        .WithMany()
                        .HasForeignKey("InsuranceBenefitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Insurance", null)
                        .WithMany()
                        .HasForeignKey("InsurancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentACar.Data.Models.Car", b =>
                {
                    b.HasOne("RentACar.Data.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Location", "Location")
                        .WithMany("Cars")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("RentACar.Data.Models.CarFeature", b =>
                {
                    b.HasOne("RentACar.Data.Models.Car", "Car")
                        .WithMany("CarFeatures")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Feature", "Feature")
                        .WithMany("CarFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("RentACar.Data.Models.CustomerFeedback", b =>
                {
                    b.HasOne("RentACar.Data.Models.Car", "Car")
                        .WithMany("Comments")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RentACar.Data.Models.Insurance", b =>
                {
                    b.HasOne("RentACar.Data.Models.Reservation", "Reservation")
                        .WithOne("Insurance")
                        .HasForeignKey("RentACar.Data.Models.Insurance", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RentACar.Data.Models.Reservation", b =>
                {
                    b.HasOne("RentACar.Data.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Location", null)
                        .WithMany("Reservations")
                        .HasForeignKey("LocationId");

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RentACar.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RentACar.Data.Models.Car", b =>
                {
                    b.Navigation("CarFeatures");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("RentACar.Data.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("RentACar.Data.Models.Feature", b =>
                {
                    b.Navigation("CarFeatures");
                });

            modelBuilder.Entity("RentACar.Data.Models.Location", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RentACar.Data.Models.Reservation", b =>
                {
                    b.Navigation("Insurance");
                });
#pragma warning restore 612, 618
        }
    }
}
