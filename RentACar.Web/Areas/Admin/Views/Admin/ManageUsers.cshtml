@using Microsoft.AspNetCore.Mvc.TagHelpers
@using RentACar.Web.ViewModels.User
@model RentACar.Web.ViewModels.User.ManagerUsersViewModel;
<div class="container my-4">
    <h2 class="text-center text-light mb-4">Управление на потребители</h2>

    <div class="table-responsive">
        <table class="table table-dark table-striped table-hover">
            <thead>
                <tr>
                    <th>Потребителско име</th>
                    <th>Имейл</th>
                    <th>Роли</th>
                    <th class="text-center">Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (UserViewModel user in Model.Users)
                {
                    <tr>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>
                            <ul class="list-unstyled mb-0" id="roles-list@(user.Id)">
                                @if (user.UserRoles.Count == 0)
                                {
                                    <li><span class="text-bg-info">Потребителят няма зададени роли.</span></li>
                                }
                                else
                                {
                                    @foreach (RoleViewModel role in user.UserRoles)
                                    {
                                        <li class="d-flex align-items-center mb-2" id="user@(user.Id)-roles">
                                            <span>@role.Name</span>
                                            <button type="button" class="btn btn-sm btn-danger ms-2 remove-role-btn"
                                                    data-userid="@user.Id" data-role="@role.Name" data-username="@user.Username">
                                                <i class="bi bi-x-circle"></i>
                                            </button>
                                        </li>
                                    }
                                }
                            </ul>
                        </td>
                        <td class="text-center">
                            <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#assignRoleModal-@user.Id">
                                Задай роля
                            </button>
                            <button type="button" class="btn btn-sm btn-danger delete-user-btn" data-userid="@user.Id" data-userUsername="@user.Username">
                                Изтрий акаунт
                            </button>
                        </td>
                    </tr>

                    <div class="modal fade" id="assignRoleModal-@user.Id" tabindex="-1" aria-labelledby="assignRoleModalLabel-@user.Id" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content bg-dark text-light">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="assignRoleModalLabel-@user.Id">Задаване на роля за @user.Username</h5>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Затвори"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="assignRoleForm-@user.Id">
                                        <input type="hidden" id="userId-@user.Id" value="@user.Id" />
                                        <div class="mb-3">
                                            <label for="role-@user.Id" class="form-label">Избери роля:</label>
                                            <select class="form-select" id="role-@user.Id" name="role">
                                                @foreach (RoleViewModel availableRole in Model.Roles.Where(r => !user.UserRoles.Any(ur => ur.Name == r.Name)))
                                                {
                                                    <option id="option-@user.Id" value="@availableRole.Name">@availableRole.Name</option>
                                                }
                                            </select>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Откажи</button>
                                    <button type="button" class="btn btn-primary save-role-btn" data-userid="@user.Id" data-modalid="assignRoleModal-@user.Id" data-username="@user.Username">
                                        Запази
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </tbody>
        </table>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.save-role-btn').forEach(button => {
            button.addEventListener('click', function () {
                const userId = this.getAttribute('data-userid');
                const modalId = this.getAttribute('data-modalid');
                const username = this.getAttribute('data-username');
                const roleSelect = document.getElementById(`role-${userId}`);
                const selectedRole = roleSelect ? roleSelect.value : null;
                const option = document.getElementById(`option-${userId}`);

                if (!selectedRole) {
                    alert('Моля, изберете роля.');
                    return;
                }

                console.log(`Задаване на роля '${selectedRole}' за потребител с ID '${userId}'`);
                const data = {
                    RoleName: selectedRole,
                    UserId: userId
                };

                fetch('/Admin/Admin/SetUserRole',
                    {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    }).then(async res => {
                        if (res.ok) {
                            const rolesList = document.getElementById(`roles-list${userId}`);
                            const newRoleItem = document.createElement('li');
                            newRoleItem.className = 'd-flex align-items-center mb-2';
                            newRoleItem.innerHTML = `
                        <span>${selectedRole}</span>
                        <button type="button" class="btn btn-sm btn-danger ms-2 remove-role-btn" data-userid="${userId}" data-role="${selectedRole}" data-username="${username}">
                        <i class="bi bi-x-circle"></i>
                        </button>
                       `;
                            rolesList.appendChild(newRoleItem);

                            const assignRoleModal = bootstrap.Modal.getInstance(document.getElementById(modalId));
                            if (assignRoleModal) {
                                assignRoleModal.hide();
                            }

                            const backdrop = document.querySelector('.modal-backdrop');
                            if (backdrop) {
                                backdrop.remove();
                            }

                            addRemoveRoleEvent(newRoleItem.querySelector('.remove-role-btn'));
                            option.remove();
                            PrintAlert(`Ролята ${selectedRole} e успешно добавена.`);
                        } else {
                            const data = await res.json();
                            if (data.status) {
                                PrintError(data.status);
                            }
                            const assignRoleModal = bootstrap.Modal.getInstance(document.getElementById(modalId));
                            if (assignRoleModal) {
                                assignRoleModal.hide();
                            }

                            const backdrop = document.querySelector('.modal-backdrop');
                            if (backdrop) {
                                backdrop.remove();
                            }
                        }
                    });


            });
        });

        function addRemoveRoleEvent(button) {
            button.addEventListener('click', function () {
                const userId = this.getAttribute('data-userid');
                const role = this.getAttribute('data-role');
                const username = this.getAttribute('data-username');
                const roleSelector = document.getElementById(`role-${userId}`);
                const deleteData = {
                    RoleName: role,
                    UserId: userId
                };
                Swal.fire({
                    title: `Премахване на роля '${role}' за потребител ${username}'`,
                    icon: 'warning',
                    background: '#343a40',
                    color: '#f8f9fa',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Да, премахни ролята',
                    cancelButtonText: 'Отказ'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/Admin/Admin/RemoveUserRole',
                            {
                                method: "POST",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(deleteData)
                            })
                            .then(async res => {
                                if (res.ok) {
                                    this.closest('li').remove();
                                    const optionElement = document.createElement('option');
                                    optionElement.innerHTML = `<option id="option-${userId}" value="${role}">${role}</option>`;
                                    roleSelector.append(optionElement);
                                    PrintAlert(`Ролята ${role} e успешно премахната.`);
                                } else {
                                    const data = await res.json();
                                    if (data.status) {
                                        PrintError(data.status);
                                    }
                                }
                            });
                    }
                });
            });
        }

        document.querySelectorAll('.remove-role-btn').forEach(addRemoveRoleEvent);
        document.querySelectorAll('.delete-user-btn').forEach(button => {
            button.addEventListener('click', function () {
                const userId = this.getAttribute('data-userid');
                const username = this.getAttribute('data-userUsername');
                const deletionData = {
                    Id: userId
                };

                Swal.fire({
                    title: `Сигурен ли си, че искаш да изтриеш акаунт с потребителско име '${username}'?`,
                    icon: 'warning',
                    background: '#343a40',
                    color: '#f8f9fa',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Да, продължи',
                    cancelButtonText: 'Отказ'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/Admin/Admin/RemoveUser', {
                            method: "POST",
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(deletionData)
                        })
                            .then(async res => {
                                if (res.ok) {
                                    this.closest('tr').remove();
                                    PrintAlert('Акаунтът беше успешно изтрит.');
                                } else {
                                    const data = await res.json();
                                    if (data.status) {
                                        PrintError(data.status);
                                    }
                                }
                            })
                            .catch(error => {
                                console.error('Грешка при заявката:', error);
                            });
                    }
                });
            });
        });

    });


</script>